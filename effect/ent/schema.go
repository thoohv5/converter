package ent

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _effect_ent_ent_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4f\x6b\x14\x31\x14\x3f\x4f\x3e\xc5\x33\x50\x99\x29\x4b\x72\xf2\xb2\xb0\x07\x2d\xad\x78\x68\x29\xf4\xe0\x71\x49\xa7\x6f\xba\xa1\x99\x64\x48\xde\x74\x5b\xca\x82\x07\x85\x4a\xbd\xea\x45\x3d\x88\x88\x9e\xbc\x89\x07\xed\xb7\x71\x6d\x3f\x86\x24\x33\xbb\x5d\xb0\x14\x65\x60\x32\x2f\xef\xbd\xdf\xef\xf7\xfe\x4c\xa3\xca\x23\x75\x88\x80\x96\x18\xd3\x75\xe3\x3c\x41\xce\x32\x5e\xd5\xc4\x59\xc6\xb5\x8b\x6f\xc2\x13\x92\x84\x75\x63\x14\x21\x67\x2c\xe3\x87\x9a\x26\xed\xbe\x28\x5d\x2d\x69\xe2\xdc\xe4\xf8\x81\x2c\x9d\x3d\x46\x4f\xe8\x25\x56\x15\x96\x29\xfd\xce\xb0\x96\xb4\x09\x9c\x15\x8c\x49\x09\xbf\xbf\x7c\xb8\x7a\x79\xce\xe8\xb4\x49\x5a\x20\x90\x6f\x4b\x82\x33\x36\x63\xac\x74\x36\x24\x55\xe3\x71\x07\xbd\xa3\x6a\x84\x11\xf0\x50\x4e\xb0\x56\x82\x1a\xc3\x6f\x9c\xbb\x8a\x26\xd1\x89\x96\xe4\x6a\x40\xc1\x58\xd5\xda\x12\x76\x70\x9a\x17\xd0\xc5\x8a\x27\x9b\xe9\x84\x33\x96\x79\xa4\xd6\x5b\xb8\x8f\x96\xce\x66\x91\x56\x4a\xb8\xfa\xf1\xfc\xfa\xe3\x8b\x2e\x2f\x27\x58\x47\x4b\x05\x3c\x0c\x01\xeb\x7d\x73\x9a\x4f\x3d\x68\x27\x9e\x7a\x4d\xe8\x07\x50\xbb\x03\x34\xb0\xde\x03\x6f\x47\xab\x00\xf4\xde\xf9\x88\x2e\x25\x48\x09\xf3\xef\x9f\x7e\x5d\xbe\xbb\x7a\xfb\x75\x7e\xf9\x3a\xdd\x4d\x9d\x3f\x8a\x82\x07\x31\x12\x86\x23\x70\x41\x3c\x46\x9a\x1e\xe4\x45\xf2\xeb\x0a\xac\x36\x70\x6f\x94\xfc\x1d\xce\x42\x69\x55\x93\xd8\x8c\xf8\x55\xce\x5d\x80\x94\x16\xc3\x12\xd6\x70\x6d\xca\xd3\x47\x87\x33\x63\xe9\xa0\xc6\xb0\x8c\x1a\xf3\xe8\x94\x70\x49\xd9\x29\x1e\xa3\xa5\x71\xd7\xaf\x31\x35\x26\xf2\xff\x45\x7e\x1b\x73\x9f\x9d\xaa\x8f\x89\xb7\x2a\xe8\xe9\xbb\x21\xcf\xcf\xdf\xcf\x3f\x5f\xcc\x5f\xbd\x49\x52\x96\x32\x16\xfb\x25\xe2\x80\x56\x27\x5d\x88\xad\xd6\x96\x21\x5f\x06\x44\x73\x5b\x35\x51\x10\x2f\x55\x8d\x66\x43\x05\xe4\x43\x48\x0b\x25\x36\x16\x37\x03\x96\xa5\xd2\x0b\xb1\xab\x7c\xc0\x2d\x6d\x30\xe4\x51\xfa\x5e\xe3\xb5\xa5\x2a\xe7\x6b\x21\x3e\x7c\xb0\x32\x86\x40\x5e\xdb\xc3\xdc\x05\x11\xed\x3d\x6c\x94\x57\xe4\x7c\x31\x80\xd5\xfd\x2a\x62\x4d\x3d\x6e\xde\xa7\xf4\x6d\x2d\xfe\xb5\x71\x8b\x72\xe0\x46\xdd\x5d\xbd\xbb\xfe\x76\x31\x7f\xf6\x93\x65\x11\x71\x14\x07\x29\x36\x4f\xb0\x6c\x09\xf3\xe9\x62\xf9\xfe\x9b\xb9\x47\x58\xa5\xed\xa1\x86\x6b\xc7\x9d\x80\x1b\xe8\xd9\xf2\x17\xb1\xda\xb0\x19\xfb\x13\x00\x00\xff\xff\x21\x5f\x55\x0f\x3a\x04\x00\x00")

func effect_ent_ent_go() ([]byte, error) {
	return bindata_read(
		_effect_ent_ent_go,
		"effect/ent/ent.go",
	)
}

var _effect_ent_schema_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func effect_ent_schema_go() ([]byte, error) {
	return bindata_read(
		_effect_ent_schema_go,
		"effect/ent/schema.go",
	)
}

var _effect_ent_schema_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4f\x8b\xdb\x3e\x10\x3d\x5b\x9f\x62\xd0\xc9\x86\xac\x0c\xbf\x5f\xe9\x61\x6f\x25\x6d\x4f\xdd\x96\xb2\xb9\x2d\x0b\xab\xda\x63\x47\x54\x96\xbd\xf6\x04\x1a\xa6\xf3\xdd\x8b\xfc\x27\x9b\x6c\x52\x68\x4a\x7d\x91\xf4\x46\x33\xf3\xde\xe8\x99\xb9\xc4\xca\x05\x04\x3d\x14\x5b\x6c\xac\xa1\xce\x6b\x91\xce\x16\xdf\x6d\x8d\x30\x81\x4a\xb9\xa6\x6b\x7b\x82\x54\x01\x00\x68\x0c\x54\xb7\xc6\xb5\x39\x06\xca\x4b\x67\x3d\x16\xa4\x55\x72\x11\x8f\xfb\xe1\xd9\x9f\x85\xa7\xca\x5a\xbd\xc2\x7f\x73\x2f\xaf\x1c\xfa\x52\xab\x4c\xa9\x3c\x07\x66\xb3\xb1\xdf\x3c\x9a\x8d\xad\x45\x60\xdb\xfa\x72\x00\xda\x2e\x74\x61\x94\xe4\xc8\xb5\x01\xaa\xb6\x1f\x23\xaf\x52\x30\x90\xa3\xbd\x51\xb4\xef\xce\x62\x03\xf5\xbb\x82\x80\x55\x82\x81\xcc\xfd\x34\x01\x19\x1b\xdf\xb9\x1f\x2e\x40\x5b\x5d\x28\x69\x54\xb5\x0b\x05\xa4\xa7\x68\x36\xa5\xa4\x19\x3c\x3c\xc6\x6a\x53\x01\x56\x49\x8f\xb4\xeb\xc3\x31\xca\x2a\x91\xd8\xe6\x72\x99\x77\x21\xb4\x64\xa3\xa4\x61\x2c\x36\xbf\xd6\x0b\x7c\x52\xf4\x2c\xca\x2a\x49\xa6\x87\x38\x06\xc7\x0e\xb7\xa0\x0f\xcd\x3e\xdb\x06\x45\xb4\xac\x66\x2e\x79\x0e\x1f\xe3\xe0\x87\xeb\x34\x4f\x39\x07\xd1\xe3\xf1\x4c\xf4\x88\x32\x30\xf7\x36\xd4\x08\x66\xdd\xfa\x5d\x13\x06\x11\x95\x44\x93\x31\xdf\x80\xab\x00\x9f\xc1\x6c\xe2\x23\x69\x17\xe8\xff\xff\xf4\xb8\xbe\x7d\xa3\x97\x6b\xf1\x1b\xbd\x61\x22\x89\x7d\x87\x3f\x0b\xdb\xa0\x5f\xdb\x01\x45\xd2\xa8\x6c\xd6\x94\x31\xbb\x0a\xcc\x7b\xac\xec\xce\x93\xc8\xb2\x8b\xe4\x0f\x60\xc6\x8c\xa1\x14\x31\xeb\xb6\x69\x30\x50\xfa\xc4\xbc\xec\x45\x9e\xb2\xd5\x0b\x37\xf4\x03\x9e\x12\x24\xd7\xe0\x5f\xf0\x9a\x1d\x16\xef\xa4\x8d\xed\x1e\x06\xea\x5d\xa8\x1f\xa7\x85\x61\xfe\x8d\xcc\xdd\xfe\xfe\xeb\xa7\xdb\x98\xf8\xa5\x77\xb5\x0b\xd6\xc7\x0c\x11\xbd\x92\xec\x0f\xe9\xfe\xbb\x99\xe9\xe3\xa1\xe9\x6b\xa6\x16\x4a\xb8\x89\x3c\x4e\x0e\x8b\xd7\x3e\x94\x35\x5e\x69\xb5\x31\xe5\xe0\xb4\x78\x3a\x32\x5a\x70\x5e\x89\x9a\xd9\xfd\x0a\x00\x00\xff\xff\xf3\x02\x1a\x87\xea\x04\x00\x00")

func effect_ent_schema_tpl() ([]byte, error) {
	return bindata_read(
		_effect_ent_schema_tpl,
		"effect/ent/schema.tpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"effect/ent/ent.go":     effect_ent_ent_go,
	"effect/ent/schema.go":  effect_ent_schema_go,
	"effect/ent/schema.tpl": effect_ent_schema_tpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"effect": &_bintree_t{nil, map[string]*_bintree_t{
		"ent": &_bintree_t{nil, map[string]*_bintree_t{
			"ent.go":     &_bintree_t{effect_ent_ent_go, map[string]*_bintree_t{}},
			"schema.go":  &_bintree_t{effect_ent_schema_go, map[string]*_bintree_t{}},
			"schema.tpl": &_bintree_t{effect_ent_schema_tpl, map[string]*_bintree_t{}},
		}},
	}},
}}
