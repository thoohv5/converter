package effect

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _effect_effect_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x41\x6b\xd4\x40\x14\x3e\x67\x7e\xc5\x73\xa0\x32\x29\x4b\xe6\xe4\x65\x61\x0f\x5a\x5a\xf1\xd0\x52\xe8\xc1\xe3\x92\xa6\x2f\xdd\xa1\x93\x4c\x98\x79\x69\x5a\xca\x82\x07\x85\x4a\xbd\xea\x45\x3d\x88\x88\x9e\xbc\x89\x07\xed\xbf\x31\x6e\x7f\x86\xcc\x24\xd9\x5d\xb4\x88\x12\xc8\x64\xe6\x7b\xef\xfb\xbe\x37\xef\xa5\x4a\xb3\x93\xf4\x18\x01\xf3\x1c\x33\x62\x4c\x15\x95\xb1\x04\x82\x45\x3c\x2f\x88\xb3\x88\x2b\xe3\xdf\x84\x67\x24\x09\x8b\x4a\xa7\x84\x9c\xb1\x88\x1f\x2b\x9a\xd5\x87\x49\x66\x0a\x49\x33\x63\x66\xa7\xf7\x64\x66\xca\x53\xb4\x84\x56\xd6\xa4\xb4\xe3\x2c\x66\x4c\x4a\xf8\xf9\xe9\xdd\xe2\xf9\x25\xa3\xf3\x6a\xd0\x01\x47\xb6\xce\x08\x2e\xd8\x9c\xb1\xcc\x94\x2e\x28\x4e\xa7\x1d\xba\x97\x16\x08\x13\xe0\x85\x39\x42\x9d\x50\xa5\xf9\x0a\xdb\x4f\x69\xe6\xb1\x6e\x27\xd7\x42\x62\xc6\xf2\xba\xcc\x60\x0f\x1b\x11\xc3\xa3\xed\x4e\xe8\x82\x45\x16\xa9\xb6\x25\xdc\xed\x52\x2e\xe6\x5e\x53\x4a\x58\x7c\x7b\x7a\xf3\xfe\x59\x97\x23\x08\x36\x3b\x38\x86\xfb\xce\x61\x71\xa8\xcf\x45\x63\x41\x99\xe4\xb1\x55\x84\x76\x04\x41\x09\x36\x77\xfd\x12\x03\x5a\x6b\xac\x27\x97\x12\xa4\x84\xf6\xeb\x87\x1f\xd7\x6f\x16\xaf\x3f\xb7\xd7\x2f\xc3\x59\x63\xec\x89\xb7\x3a\xf2\x91\x30\x9e\x80\x71\xc9\x43\xa4\xe6\x48\xc4\x01\x57\x39\x94\x4a\xc3\x9d\x49\xc0\x3b\x9e\xc1\x68\x5e\x50\xb2\xed\xf9\x73\xc1\x8d\x83\x90\xe6\xc3\x02\xd7\x78\xa3\xe1\xe1\xa3\xe3\x99\xb3\xb0\x50\xa5\x59\x44\x95\x7e\x70\x4e\xb8\x94\xec\x0a\x9a\x06\xe3\x53\xaa\xb4\x97\xfe\x43\xf7\x36\xd1\xdf\x13\x6f\x15\xef\x95\xbb\xde\xb6\x97\x6f\xdb\x8f\x57\xed\x8b\x57\xc1\xc5\xd2\xc1\x30\x2f\x89\xef\xc9\x7a\x77\xe3\x64\xa7\x2e\x33\x27\x96\x01\x7e\xbb\x9b\x56\xde\x10\xcf\xd2\x02\xf5\x56\xea\x90\x8f\x21\xcc\x51\xb2\x35\x9c\x8c\x58\x14\xaa\x8e\x93\xfd\xd4\x3a\xdc\x51\x1a\x9d\xf0\xd6\x0f\x2a\xab\x4a\xca\x05\xdf\x70\xfe\xe1\xa3\xb5\x0e\x38\xb2\xaa\x3c\x16\xc6\x25\x7e\x7f\x80\x55\x6a\x53\x32\x36\x1e\xc1\xfa\x50\xc5\xbe\xa6\x9e\x57\xf4\x29\xfd\x8d\xc6\xff\x7a\x71\x43\x39\xb0\x72\xf7\xb7\xbb\xbb\xf9\x72\xd5\x3e\xf9\xce\x22\xcf\x38\xf1\x3d\x4c\xb6\xcf\x30\xab\x09\x45\x33\x0c\xdc\x7f\x2b\xf7\x0c\xeb\xb2\x3d\xd5\x78\xe3\xb4\x33\xb0\xa2\x9e\x2f\x7f\x8e\x52\x69\x36\x67\xbf\x02\x00\x00\xff\xff\x67\x71\x25\x79\x0d\x04\x00\x00")

func effect_effect_go() ([]byte, error) {
	return bindata_read(
		_effect_effect_go,
		"effect/effect.go",
	)
}

var _effect_model_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func effect_model_go() ([]byte, error) {
	return bindata_read(
		_effect_model_go,
		"effect/model.go",
	)
}

var _effect_model_tpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x4e\xc3\x30\x10\x45\xd7\xcc\x29\x46\x5e\xb5\x48\xb8\x87\xc8\x1e\xb1\xe8\x01\x6a\x92\xa9\x15\x61\x3b\x96\x33\x59\x54\xc3\xbf\x3b\x72\x8a\x88\xd8\x7d\x7f\x3f\xbd\xf9\x66\x93\xdc\xe7\x22\xec\xf2\x32\x49\xf2\x5a\x93\x03\x6a\x18\xbf\x42\x14\x36\xf3\x1f\xcf\x08\x10\xcd\xb9\x2e\x4d\xd9\xe9\x9c\xc5\x11\x5d\x2e\xfd\xff\x1a\x3e\x93\xf8\x61\xc9\x59\x8a\x02\xa4\x8f\x2a\x47\x7f\x0d\x11\xe0\x55\xdb\x36\x2a\x1b\x9b\xb5\x50\xa2\xb0\x1f\x96\xb4\xe5\xb2\x02\xc4\xcc\xfc\x34\x1d\x8e\xde\x99\xf9\xf7\x90\xe5\x7b\x0c\x59\xd2\x10\x56\x01\x76\xed\xa3\xf6\x74\xdb\x2f\x44\xe0\xf6\x0b\xbf\xb1\x94\x09\x20\x10\xdd\xb7\x32\xf2\xe9\xf5\xff\x86\x33\xef\x8f\xae\x3c\x9d\xfb\xa0\xb9\x44\x36\x7a\x69\xa2\x5b\x2b\xec\xfe\xe8\x4e\x00\x8e\x40\x66\xbb\xf2\x27\x00\x00\xff\xff\xe7\xfb\x0e\xf2\x22\x01\x00\x00")

func effect_model_tpl() ([]byte, error) {
	return bindata_read(
		_effect_model_tpl,
		"effect/model.tpl",
	)
}

var _effect_standard_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xd0\xb1\x4a\xf3\x50\x14\x07\xf0\xf9\x9e\xa7\x38\x64\x6a\xc3\x47\xef\xf4\x3d\x80\x88\x83\x83\xe0\x20\x38\x88\x43\x7a\x7b\x9a\x5e\x4c\x72\xcb\xb9\x37\x95\x22\x0e\x82\xb5\x15\x3a\xdb\xb5\xc1\xa5\x4b\x75\x72\x12\xf4\x65\x4c\xda\xc7\x90\x26\x8d\xa5\x82\xd3\x09\x07\xce\xef\xff\xcf\xed\x07\xea\x2a\x08\x09\xa9\xdb\x25\xe5\x00\x74\xdc\x37\xec\xb0\x01\xc2\xd3\xc6\x03\x10\x5e\xa8\x5d\x2f\x6d\xb7\x94\x89\xa5\xeb\x19\xd3\x1b\xfc\x97\xca\x24\x03\x62\x47\x2c\x3b\x81\x0b\xac\x49\x59\x91\x07\x4d\x00\x29\xb1\x58\x64\xab\xc7\x49\x31\x1f\xe7\xe3\x87\x7c\xfa\x04\x6e\xd8\x27\x3c\x3e\x2a\x79\xd4\x89\x23\xee\x06\x8a\xf0\x06\x84\x94\xb8\x7a\xbf\x5f\x3f\x8f\x40\x1c\x58\x4b\x71\x3b\x1a\x36\xae\x19\xb5\x69\x9d\xb3\x76\xc4\xff\x30\x36\x1d\x8a\xd0\x3f\xd9\x8c\x26\x12\xb3\x61\xb8\x85\x8a\x2c\x97\x68\x1d\xa7\xca\x6d\xb5\x7c\x3a\x02\x71\xba\xfd\x21\xeb\x58\x27\x61\xb9\x5f\x67\x8b\xaf\xcf\xac\xb8\x7b\x05\x71\x16\xb4\x23\x42\xbf\x1c\xd5\xcd\x72\x56\xbc\xbc\xe5\x93\xd9\x3a\x5b\x80\x38\x34\x51\x1a\x27\x16\x2f\x2e\xfd\xea\xf3\x27\xae\x3a\xdc\x8b\xab\x4d\x7f\xf7\x08\xad\x1d\x5c\xcc\xc7\xab\xe5\xc7\x26\x31\xac\xbb\xd4\x56\x45\xff\xea\x5e\xf6\xd8\xc7\xb6\x15\xfe\xd4\xbe\x03\x00\x00\xff\xff\x9d\x97\xe3\x4b\xbc\x01\x00\x00")

func effect_standard_go() ([]byte, error) {
	return bindata_read(
		_effect_standard_go,
		"effect/standard.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"effect/effect.go":   effect_effect_go,
	"effect/model.go":    effect_model_go,
	"effect/model.tpl":   effect_model_tpl,
	"effect/standard.go": effect_standard_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"effect": &_bintree_t{nil, map[string]*_bintree_t{
		"effect.go":   &_bintree_t{effect_effect_go, map[string]*_bintree_t{}},
		"model.go":    &_bintree_t{effect_model_go, map[string]*_bintree_t{}},
		"model.tpl":   &_bintree_t{effect_model_tpl, map[string]*_bintree_t{}},
		"standard.go": &_bintree_t{effect_standard_go, map[string]*_bintree_t{}},
	}},
}}
